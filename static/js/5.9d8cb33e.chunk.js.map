{"version":3,"sources":["components/Quotes/HighlightedQuote.module.css","components/Comments/Comments.module.css","components/Comments/NewCommentForm.module.css","components/Comments/CommentList.module.css","components/Comments/CommentItem.module.css","components/Quotes/HighlightedQuote.js","components/Comments/NewCommentForm.js","components/Comments/CommentItem.js","components/Comments/CommentList.js","components/Comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","styles","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","handleFormSubmit","event","preventDefault","enteredText","current","value","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","handleAddedComment","useCallback","length","CommentList","onClick","QuoteDetail","useRouteMatch","path","url","getSingleQuote","loadedQuote","exact","to"],"mappings":"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","file":"static/js/5.9d8cb33e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3VG0Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2-b4q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__yl6Qx\",\"loading\":\"NewCommentForm_loading__34rNa\",\"control\":\"NewCommentForm_control__vNiM8\",\"actions\":\"NewCommentForm_actions__3INR_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentList_comments__3p18b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__s-rNz\"};","import PropTypes from \"prop-types\";\n\nimport styles from \"./HighlightedQuote.module.css\";\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={styles.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nHighlightedQuote.propTypes = {\n  author: PropTypes.string,\n  text: PropTypes.string,\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n\nimport styles from \"./NewCommentForm.module.css\";\n\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId });\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleFormSubmit}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={styles.control} onSubmit={handleFormSubmit}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={styles.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  quoteId: PropTypes.string,\n  onAddedComment: PropTypes.func,\n};\n\nexport default NewCommentForm;\n","import PropTypes from \"prop-types\";\n\nimport styles from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={styles.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nCommentItem.propTypes = {\n  text: PropTypes.string,\n};\n\nexport default CommentItem;\n","import PropTypes from \"prop-types\";\n\nimport styles from \"./CommentList.module.css\";\n\nimport CommentItem from \"./CommentItem\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={styles.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.array,\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\n\nimport styles from \"./Comments.module.css\";\n\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentList from \"./CommentList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { id } = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(id);\n  }, [sendRequest, id]);\n\n  const handleAddingComment = () => {\n    setIsAddingComment(true);\n  };\n\n  const handleAddedComment = useCallback(() => {\n    sendRequest(id);\n    setIsAddingComment(false);\n  }, [sendRequest, id]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet</p>;\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentList comments={loadedComments} />;\n  }\n\n  return (\n    <section className={styles.comments}>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={handleAddingComment}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={id} onAddedComment={handleAddedComment} />\n      )}\n      <h2>User Comments</h2>\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport HighLightedQuote from \"../components/Quotes/HighlightedQuote\";\nimport Comments from \"../components/Comments/Comments\";\n\nconst QuoteDetail = () => {\n  const { id } = useParams();\n  const { path, url } = useRouteMatch();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(id);\n  }, [sendRequest, id]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found</p>;\n  }\n\n  return (\n    <>\n      <HighLightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${path}/comments`}>\n        <Comments />\n      </Route>\n    </>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}