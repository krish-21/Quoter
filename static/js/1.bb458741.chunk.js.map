{"version":3,"sources":["components/UI/Card.module.css","components/Quotes/QuoteForm.module.css","components/UI/Card.js","components/Quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","styles","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","didFocus","setDidFocus","when","message","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","quoteData"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yGCWtHC,EARF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAOC,KAAvB,SAA8BH,EAAMI,Y,yBCwE9BC,EArEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAErB,EAAgCE,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAqBA,OACE,qCACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,iBACP,yEAGJ,cAAC,EAAD,UACE,uBACEC,QA7BgB,WACtBH,GAAY,IA6BNV,UAAWC,IAAOa,KAClBC,SA3BR,SAA0BC,GACxBA,EAAMC,iBAEN,IAAMC,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAIzCrB,EAAMuB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAgB5C,UAKGtB,EAAM0B,WACL,qBAAKzB,UAAWC,IAAOyB,QAAvB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK3B,UAAWC,IAAO2B,QAAvB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKL,UAAWC,IAAO2B,QAAvB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKP,UAAWC,IAAOiC,QAAvB,SACE,wBAAQC,QAjCQ,WACxBzB,GAAY,IAgCgCV,UAAU,MAA9C,kCC5BGoC,UA1BE,WACf,IAAMC,EAAUC,cAEhB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAErBC,qBAAU,WACO,cAAXD,GACFL,EAAQO,KAAK,aAEd,CAACF,EAAQL,IAYZ,OACE,cAAC,EAAD,CAAWZ,UAAsB,YAAXiB,EAAsBpB,WAXvB,SAACuB,GACtBJ,EAAYI","file":"static/js/1.bb458741.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2rjOY\",\"loading\":\"QuoteForm_loading__2wubf\",\"control\":\"QuoteForm_control__1IPfY\",\"actions\":\"QuoteForm_actions__23859\"};","import PropTypes from \"prop-types\";\n\nimport styles from \"./Card.module.css\";\n\nconst Card = (props) => {\n  return <div className={styles.card}>{props.children}</div>;\n};\n\nCard.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport styles from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  const [didFocus, setDidFocus] = useState(false);\n\n  const handleFormFocus = () => {\n    setDidFocus(true);\n  };\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const handleFocusFinish = () => {\n    setDidFocus(false);\n  };\n\n  return (\n    <>\n      <Prompt\n        when={didFocus}\n        message={() =>\n          \"Are you sure you want to leave? All your entered data will be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={handleFormFocus}\n          className={styles.form}\n          onSubmit={handleFormSubmit}\n        >\n          {props.isLoading && (\n            <div className={styles.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={styles.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={styles.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={styles.actions}>\n            <button onClick={handleFocusFinish} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nQuoteForm.propTypes = {\n  onAddQuote: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nimport QuoteForm from \"../components/Quotes/QuoteForm\";\n\nconst NewQuote = () => {\n  const history = useHistory();\n\n  const { sendRequest, status } = useHttp(addQuote);\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/quotes\");\n    }\n  }, [status, history]);\n\n  const handleAddQuote = (quoteData) => {\n    sendRequest(quoteData);\n\n    // can go back\n    // history.push(\"/quotes\");\n\n    // cannot go back\n    // history.replace(\"/quotes\");\n  };\n\n  return (\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={handleAddQuote} />\n  );\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}